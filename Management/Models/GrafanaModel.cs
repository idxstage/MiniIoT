// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var grafanaModel = GrafanaModel.FromJson(jsonString);

namespace Management.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;



    public partial class GrafanaModel
    {
        [JsonProperty("dashboard")]
        public Dashboard Dashboard { get; set; }

        [JsonProperty("overwrite")]
        public bool Overwrite { get; set; }
    }
    public partial class Dashboard
    {
        [JsonProperty("annotations")]
        public Annotations Annotations { get; set; }

        [JsonProperty("editable")]
        public bool Editable { get; set; }

        [JsonProperty("gnetId")]
        public object GnetId { get; set; }

        [JsonProperty("graphTooltip")]
        public long GraphTooltip { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("links")]
        public object[] Links { get; set; }

        [JsonProperty("panels")]
        public List<Panel> Panels { get; set; }

        [JsonProperty("refresh")]
        public bool Refresh { get; set; }

        [JsonProperty("schemaVersion")]
        public long SchemaVersion { get; set; }

        [JsonProperty("style")]
        public string Style { get; set; }

        [JsonProperty("tags")]
        public object[] Tags { get; set; }

        [JsonProperty("templating")]
        public Annotations Templating { get; set; }

        [JsonProperty("time")]
        public Time Time { get; set; }

        [JsonProperty("timepicker")]
        public Timepicker Timepicker { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }
    }

    public partial class Annotations
    {
        [JsonProperty("list")]
        public List[] List { get; set; }
    }

    public partial class List
    {
        [JsonProperty("builtIn")]
        public long BuiltIn { get; set; }

        [JsonProperty("datasource")]
        public string Datasource { get; set; }

        [JsonProperty("enable")]
        public bool Enable { get; set; }

        [JsonProperty("hide")]
        public bool Hide { get; set; }

        [JsonProperty("iconColor")]
        public string IconColor { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Panel
    {
        [JsonProperty("mode")]
        public String Mode { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("aliasColors")]
        public AliasColors AliasColors { get; set; }

        [JsonProperty("bars")]
        public bool Bars { get; set; }

        [JsonProperty("dashLength")]
        public long DashLength { get; set; }

        [JsonProperty("dashes")]
        public bool Dashes { get; set; }

        [JsonProperty("datasource")]
        public string Datasource { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("fieldConfig")]
        public FieldConfig FieldConfig { get; set; }

        [JsonProperty("fill")]
        public long Fill { get; set; }

        [JsonProperty("fillGradient")]
        public long FillGradient { get; set; }

        [JsonProperty("gridPos")]
        public GridPos GridPos { get; set; }

        [JsonProperty("hiddenSeries")]
        public bool HiddenSeries { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("legend")]
        public Legend Legend { get; set; }

        [JsonProperty("lines")]
        public bool Lines { get; set; }

        [JsonProperty("linewidth")]
        public long Linewidth { get; set; }

        [JsonProperty("nullPointMode")]
        public string NullPointMode { get; set; }

        [JsonProperty("options")]
        public Options Options { get; set; }

        [JsonProperty("percentage")]
        public bool Percentage { get; set; }

        [JsonProperty("pointradius")]
        public double Pointradius { get; set; }

        [JsonProperty("points")]
        public bool Points { get; set; }

        [JsonProperty("renderer")]
        public string Renderer { get; set; }

        [JsonProperty("seriesOverrides")]
        public object[] SeriesOverrides { get; set; }

        [JsonProperty("spaceLength")]
        public long SpaceLength { get; set; }

        [JsonProperty("stack")]
        public bool Stack { get; set; }

        [JsonProperty("steppedLine")]
        public bool SteppedLine { get; set; }

        [JsonProperty("targets")]
        public Target[] Targets { get; set; }

        [JsonProperty("thresholds")]
        public List<Threshold> Thresholds { get; set; }

        [JsonProperty("timeFrom")]
        public object TimeFrom { get; set; }

        [JsonProperty("timeRegions")]
        public object[] TimeRegions { get; set; }

        [JsonProperty("timeShift")]
        public object TimeShift { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("tooltip")]
        public Tooltip Tooltip { get; set; }

        [JsonProperty("transparent")]
        public bool Transparent { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("xaxis")]
        public Xaxis Xaxis { get; set; }

        [JsonProperty("yaxes")]
        public Yax[] Yaxes { get; set; }

        [JsonProperty("yaxis")]
        public Yaxis Yaxis { get; set; }
    }

    public partial class AliasColors
    {
    }

    public partial class FieldConfig
    {
        [JsonProperty("defaults")]
        public Defaults Defaults { get; set; }

        [JsonProperty("overrides")]
        public object[] Overrides { get; set; }
    }

    public partial class Defaults
    {
        [JsonProperty("custom")]
        public AliasColors Custom { get; set; }
    }

    public partial class GridPos
    {
        [JsonProperty("h")]
        public long H { get; set; }

        [JsonProperty("w")]
        public long W { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }
    }

    public partial class Legend
    {
        [JsonProperty("avg")]
        public bool Avg { get; set; }

        [JsonProperty("current")]
        public bool Current { get; set; }

        [JsonProperty("max")]
        public bool Max { get; set; }

        [JsonProperty("min")]
        public bool Min { get; set; }

        [JsonProperty("show")]
        public bool Show { get; set; }

        [JsonProperty("total")]
        public bool Total { get; set; }

        [JsonProperty("values")]
        public bool Values { get; set; }
    }

    public partial class Options
    {
        [JsonProperty("dataLinks")]
        public object[] DataLinks { get; set; }
    }

    public partial class Target
    {
        [JsonProperty("groupBy")]
        public GroupBy[] GroupBy { get; set; }

        [JsonProperty("orderByTime")]
        public string OrderByTime { get; set; }

        [JsonProperty("policy")]
        public string Policy { get; set; }

        [JsonProperty("refId")]
        public string RefId { get; set; }

        [JsonProperty("resultFormat")]
        public string ResultFormat { get; set; }

        [JsonProperty("select")]
        public GroupBy[][] Select { get; set; }

        [JsonProperty("tags")]
        public object[] Tags { get; set; }

        [JsonProperty("measurement", NullValueHandling = NullValueHandling.Ignore)]
        public string Measurement { get; set; }
    }

    public partial class GroupBy
    {
        [JsonProperty("params")]
        public string[] Params { get; set; }

        [JsonProperty("type")]
        public String Type { get; set; }
    }

    public partial class Threshold
    {
        [JsonProperty("colorMode")]
        public string ColorMode { get; set; }

        [JsonProperty("fill")]
        public bool Fill { get; set; }

        [JsonProperty("line")]
        public bool Line { get; set; }

        [JsonProperty("op")]
        public string Op { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("yaxis")]
        public string Yaxis { get; set; }
    }

    public partial class Tooltip
    {
        [JsonProperty("shared")]
        public bool Shared { get; set; }

        [JsonProperty("sort")]
        public long Sort { get; set; }

        [JsonProperty("value_type")]
        public string ValueType { get; set; }
    }

    public partial class Xaxis
    {
        [JsonProperty("buckets")]
        public object Buckets { get; set; }

        [JsonProperty("mode")]
        public Mode Mode { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("show")]
        public bool Show { get; set; }

        [JsonProperty("values")]
        public object[] Values { get; set; }
    }

    public partial class Yax
    {
        [JsonProperty("format")]
        public Format Format { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("logBase")]
        public long LogBase { get; set; }

        [JsonProperty("max")]
        public object Max { get; set; }

        [JsonProperty("min")]
        public object Min { get; set; }

        [JsonProperty("show")]
        public bool Show { get; set; }
    }

    public partial class Yaxis
    {
        [JsonProperty("align")]
        public bool Align { get; set; }

        [JsonProperty("alignLevel")]
        public object AlignLevel { get; set; }
    }

    public partial class Time
    {
        [JsonProperty("from")]
        public String From { get; set; }

        [JsonProperty("to")]
        public String To { get; set; }
    }

    public partial class Timepicker
    {
        [JsonProperty("refresh_intervals")]
        public string[] RefreshIntervals { get; set; }
    }

    public enum Mode { Field, Fill, Mean, Time };

    public enum Format { Short };


}
